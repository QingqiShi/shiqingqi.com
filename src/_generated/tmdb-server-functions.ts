"use server";

import "server-only";
import { tmdbGet, type QueryParams } from "../utils/tmdb-client";

/**
 * Server functions for TMDB APIs - can be called from server components directly
 * or from client components via API routes. Each function accepts a single params object.
 *
 * This file is auto-generated by tooling/tmdb-codegen/generator.js
 * Do not edit manually - changes will be overwritten.
 */

export async function getConfiguration(
  params?: QueryParams<"/3/configuration", "get">,
) {
  return tmdbGet("/3/configuration", params);
}

export async function getConfigurationCountries(
  params?: QueryParams<"/3/configuration/countries", "get">,
) {
  return tmdbGet("/3/configuration/countries", params);
}

export async function getConfigurationLanguages(
  params?: QueryParams<"/3/configuration/languages", "get">,
) {
  return tmdbGet("/3/configuration/languages", params);
}

export async function getMovieGenres(
  params?: QueryParams<"/3/genre/movie/list", "get">,
) {
  return tmdbGet("/3/genre/movie/list", params);
}

export async function getTvShowGenres(
  params?: QueryParams<"/3/genre/tv/list", "get">,
) {
  return tmdbGet("/3/genre/tv/list", params);
}

export async function discoverMovies(
  params?: QueryParams<"/3/discover/movie", "get">,
) {
  return tmdbGet("/3/discover/movie", {
    "vote_count.gte": 300,
    "vote_average.gte": 3,
    ...params,
  });
}

export async function discoverTvShows(
  params?: QueryParams<"/3/discover/tv", "get">,
) {
  return tmdbGet("/3/discover/tv", {
    "vote_count.gte": 300,
    "vote_average.gte": 3,
    ...params,
  });
}

export async function getMovieDetails(
  params: { movie_id: string } & QueryParams<"/3/movie/{movie_id}", "get">,
) {
  const { movie_id, ...queryParams } = params;
  return tmdbGet("/3/movie/{movie_id}", queryParams, { movie_id });
}

export async function getMovieVideos(
  params: { movie_id: string } & QueryParams<
    "/3/movie/{movie_id}/videos",
    "get"
  >,
) {
  const { movie_id, ...queryParams } = params;
  return tmdbGet("/3/movie/{movie_id}/videos", queryParams, { movie_id });
}

export async function getMovieRecommendations(
  params: { movie_id: string } & QueryParams<
    "/3/movie/{movie_id}/recommendations",
    "get"
  >,
) {
  const { movie_id, ...queryParams } = params;
  return tmdbGet("/3/movie/{movie_id}/recommendations", queryParams, {
    movie_id,
  });
}

export async function getTvShowDetails(
  params: { series_id: string } & QueryParams<"/3/tv/{series_id}", "get">,
) {
  const { series_id, ...queryParams } = params;
  return tmdbGet("/3/tv/{series_id}", queryParams, { series_id });
}

export async function getTvShowVideos(
  params: { series_id: string } & QueryParams<
    "/3/tv/{series_id}/videos",
    "get"
  >,
) {
  const { series_id, ...queryParams } = params;
  return tmdbGet("/3/tv/{series_id}/videos", queryParams, { series_id });
}

export async function getTvShowRecommendations(
  params: { series_id: string } & QueryParams<
    "/3/tv/{series_id}/recommendations",
    "get"
  >,
) {
  const { series_id, ...queryParams } = params;
  return tmdbGet("/3/tv/{series_id}/recommendations", queryParams, {
    series_id,
  });
}

export async function searchMovies(
  params: QueryParams<"/3/search/movie", "get">,
) {
  return tmdbGet("/3/search/movie", params);
}

export async function searchTvShows(
  params: QueryParams<"/3/search/tv", "get">,
) {
  return tmdbGet("/3/search/tv", params);
}

export async function searchPerson(
  params: QueryParams<"/3/search/person", "get">,
) {
  return tmdbGet("/3/search/person", params);
}
