// Generated by generate-selective-zod.ts
// AST-BASED SCHEMA GENERATION - Uses TypeScript Compiler API for robust parsing
// Only includes Zod schemas for operations marked with needsZodSchema: true
//
// EXTENSIBLE: Add new operations by marking them with needsZodSchema: true in endpoints-config.js
// PERFORMANCE OPTIMIZED:
// - Individual exports for optimal tree-shaking 
// - Backward compatible operationsSchema object
// - AST parsing replaces fragile regex approach
import { z } from "zod";

// discover-movie schema for direct import (tree-shakable)
export const discoverMovieSchema = z.object({
  parameters: z.object({
    query: z.object({
        "certification": z.string().nullable().optional(),
        "certification.gte": z.string().nullable().optional(),
        "certification.lte": z.string().nullable().optional(),
        "certification_country": z.string().nullable().optional(),
        "include_adult": z.boolean().nullable().optional(),
        "include_video": z.boolean().nullable().optional(),
        "language": z.string().nullable().optional(),
        "page": z.number().nullable().optional(),
        "primary_release_year": z.number().nullable().optional(),
        "primary_release_date.gte": z.string().nullable().optional(),
        "primary_release_date.lte": z.string().nullable().optional(),
        "region": z.string().nullable().optional(),
        "release_date.gte": z.string().nullable().optional(),
        "release_date.lte": z.string().nullable().optional(),
        "sort_by": z.union([z.literal("original_title.asc"), z.literal("original_title.desc"), z.literal("popularity.asc"), z.literal("popularity.desc"), z.literal("revenue.asc"), z.literal("revenue.desc"), z.literal("primary_release_date.asc"), z.literal("title.asc"), z.literal("title.desc"), z.literal("primary_release_date.desc"), z.literal("vote_average.asc"), z.literal("vote_average.desc"), z.literal("vote_count.asc"), z.literal("vote_count.desc")]).nullable().optional(),
        "vote_average.gte": z.number().nullable().optional(),
        "vote_average.lte": z.number().nullable().optional(),
        "vote_count.gte": z.number().nullable().optional(),
        "vote_count.lte": z.number().nullable().optional(),
        "watch_region": z.string().nullable().optional(),
        "with_cast": z.string().nullable().optional(),
        "with_companies": z.string().nullable().optional(),
        "with_crew": z.string().nullable().optional(),
        "with_genres": z.string().nullable().optional(),
        "with_keywords": z.string().nullable().optional(),
        "with_origin_country": z.string().nullable().optional(),
        "with_original_language": z.string().nullable().optional(),
        "with_people": z.string().nullable().optional(),
        "with_release_type": z.number().nullable().optional(),
        "with_runtime.gte": z.number().nullable().optional(),
        "with_runtime.lte": z.number().nullable().optional(),
        "with_watch_monetization_types": z.string().nullable().optional(),
        "with_watch_providers": z.string().nullable().optional(),
        "without_companies": z.string().nullable().optional(),
        "without_genres": z.string().nullable().optional(),
        "without_keywords": z.string().nullable().optional(),
        "without_watch_providers": z.string().nullable().optional(),
        "year": z.number().nullable().optional()
      }).nullable().optional(),
    header: z.never().nullable().optional(),
    path: z.never().nullable().optional(),
    cookie: z.never().nullable().optional(),
  }),
  requestBody: z.never().nullable().optional(),
  responses: z.object({
    200: z.object({
      headers: z.record(z.unknown()),
      content: z.object({
        "application/json": z.unknown(),
      }),
    }),
  }),
});

// discover-tv schema for direct import (tree-shakable)
export const discoverTvSchema = z.object({
  parameters: z.object({
    query: z.object({
        "air_date.gte": z.string().nullable().optional(),
        "air_date.lte": z.string().nullable().optional(),
        "first_air_date_year": z.number().nullable().optional(),
        "first_air_date.gte": z.string().nullable().optional(),
        "first_air_date.lte": z.string().nullable().optional(),
        "include_adult": z.boolean().nullable().optional(),
        "include_null_first_air_dates": z.boolean().nullable().optional(),
        "language": z.string().nullable().optional(),
        "page": z.number().nullable().optional(),
        "screened_theatrically": z.boolean().nullable().optional(),
        "sort_by": z.union([z.literal("popularity.asc"), z.literal("popularity.desc"), z.literal("vote_average.asc"), z.literal("vote_average.desc"), z.literal("vote_count.asc"), z.literal("vote_count.desc"), z.literal("first_air_date.asc"), z.literal("first_air_date.desc"), z.literal("name.asc"), z.literal("name.desc"), z.literal("original_name.asc"), z.literal("original_name.desc")]).nullable().optional(),
        "timezone": z.string().nullable().optional(),
        "vote_average.gte": z.number().nullable().optional(),
        "vote_average.lte": z.number().nullable().optional(),
        "vote_count.gte": z.number().nullable().optional(),
        "vote_count.lte": z.number().nullable().optional(),
        "watch_region": z.string().nullable().optional(),
        "with_companies": z.string().nullable().optional(),
        "with_genres": z.string().nullable().optional(),
        "with_keywords": z.string().nullable().optional(),
        "with_networks": z.number().nullable().optional(),
        "with_origin_country": z.string().nullable().optional(),
        "with_original_language": z.string().nullable().optional(),
        "with_runtime.gte": z.number().nullable().optional(),
        "with_runtime.lte": z.number().nullable().optional(),
        "with_status": z.string().nullable().optional(),
        "with_watch_monetization_types": z.string().nullable().optional(),
        "with_watch_providers": z.string().nullable().optional(),
        "without_companies": z.string().nullable().optional(),
        "without_genres": z.string().nullable().optional(),
        "without_keywords": z.string().nullable().optional(),
        "without_watch_providers": z.string().nullable().optional(),
        "with_type": z.string().nullable().optional()
      }).nullable().optional(),
    header: z.never().nullable().optional(),
    path: z.never().nullable().optional(),
    cookie: z.never().nullable().optional(),
  }),
  requestBody: z.never().nullable().optional(),
  responses: z.object({
    200: z.object({
      headers: z.record(z.unknown()),
      content: z.object({
        "application/json": z.unknown(),
      }),
    }),
  }),
});

// search-movie schema for direct import (tree-shakable)
export const searchMovieSchema = z.object({
  parameters: z.object({
    query: z.object({
        "query": z.string(),
        "include_adult": z.boolean().nullable().optional(),
        "language": z.string().nullable().optional(),
        "primary_release_year": z.string().nullable().optional(),
        "page": z.number().nullable().optional(),
        "region": z.string().nullable().optional(),
        "year": z.string().nullable().optional()
      }),
    header: z.never().nullable().optional(),
    path: z.never().nullable().optional(),
    cookie: z.never().nullable().optional(),
  }),
  requestBody: z.never().nullable().optional(),
  responses: z.object({
    200: z.object({
      headers: z.record(z.unknown()),
      content: z.object({
        "application/json": z.unknown(),
      }),
    }),
  }),
});

// search-tv schema for direct import (tree-shakable)
export const searchTvSchema = z.object({
  parameters: z.object({
    query: z.object({
        "query": z.string(),
        "first_air_date_year": z.number().nullable().optional(),
        "include_adult": z.boolean().nullable().optional(),
        "language": z.string().nullable().optional(),
        "page": z.number().nullable().optional(),
        "year": z.number().nullable().optional()
      }),
    header: z.never().nullable().optional(),
    path: z.never().nullable().optional(),
    cookie: z.never().nullable().optional(),
  }),
  requestBody: z.never().nullable().optional(),
  responses: z.object({
    200: z.object({
      headers: z.record(z.unknown()),
      content: z.object({
        "application/json": z.unknown(),
      }),
    }),
  }),
});

// search-person schema for direct import (tree-shakable)
export const searchPersonSchema = z.object({
  parameters: z.object({
    query: z.object({
        "query": z.string(),
        "include_adult": z.boolean().nullable().optional(),
        "language": z.string().nullable().optional(),
        "page": z.number().nullable().optional()
      }),
    header: z.never().nullable().optional(),
    path: z.never().nullable().optional(),
    cookie: z.never().nullable().optional(),
  }),
  requestBody: z.never().nullable().optional(),
  responses: z.object({
    200: z.object({
      headers: z.record(z.unknown()),
      content: z.object({
        "application/json": z.unknown(),
      }),
    }),
  }),
});

// Backward compatibility object (prefer individual imports above for better tree-shaking)
export const operationsSchema = z.object({
  "discover-movie": discoverMovieSchema,
  "discover-tv": discoverTvSchema,
  "search-movie": searchMovieSchema,
  "search-tv": searchTvSchema,
  "search-person": searchPersonSchema,
});
