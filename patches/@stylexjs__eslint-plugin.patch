# Patched to support the `stylex-breakpoints` babel plugin, which basically opts out of the computed
# key check.

diff --git a/lib/stylex-valid-styles.js b/lib/stylex-valid-styles.js
index a4250d24ee10c80cc81bd8b1c3658d0a5fbe640e..4b3fb7d44cd5a8e95a8ca90034f8867f6a329ddb 100644
--- a/lib/stylex-valid-styles.js
+++ b/lib/stylex-valid-styles.js
@@ -1187,31 +1187,33 @@ const stylexValidStyles = {
         if ((0, _isStylexDefineVarsToken.default)(styleKey, stylexDefineVarsTokenImports)) {
           return undefined;
         }
-        if (style.computed && styleKey.type !== 'Literal') {
-          const val = (0, _evaluate.default)(styleKey, variables);
-          if (val == null) {
-            return context.report({
-              node: style.key,
-              loc: style.key.loc,
-              message: 'Computed key cannot be resolved.'
-            });
-          } else if (val === 'ARG') {
+        if (styleKey.type !== 'MemberExpression' && styleKey?.object?.name !== 'breakpoints') {
+          if (style.computed && styleKey.type !== 'Literal') {
+            const val = (0, _evaluate.default)(styleKey, variables);
+            if (val == null) {
+              return context.report({
+                node: style.key,
+                loc: style.key.loc,
+                message: 'Computed key cannot be resolved.'
+              });
+            } else if (val === 'ARG') {
+              return context.report({
+                node: style.key,
+                loc: style.key.loc,
+                message: 'Computed key cannot depend on function argument'
+              });
+            } else {
+              styleKey = val;
+            }
+          }
+          if (styleKey.type !== 'Literal' && styleKey.type !== 'Identifier') {
             return context.report({
-              node: style.key,
-              loc: style.key.loc,
-              message: 'Computed key cannot depend on function argument'
+              node: styleKey,
+              loc: styleKey.loc,
+              message: 'All keys in a stylex object must be static literal values.'
             });
-          } else {
-            styleKey = val;
           }
         }
-        if (styleKey.type !== 'Literal' && styleKey.type !== 'Identifier') {
-          return context.report({
-            node: styleKey,
-            loc: styleKey.loc,
-            message: 'All keys in a stylex object must be static literal values.'
-          });
-        }
         const key = propName ?? (styleKey.type === 'Identifier' ? styleKey.name : styleKey.value);
         if (typeof key !== 'string') {
           return context.report({
